setglobal nocompatible
setglobal pastetoggle=<F2>

" Lazyredraw attempts to solve Vim lag by reducing the amount of
" processing required. When enabled, any action that is not typed
" will not cause the screen to redraw
set ttyfast
set lazyredraw

let g:python_host_skip_check=1
let g:loaded_python3_provider=1

"  Vim plug
" https://github.com/junegunn/vim-plug
" ------------------------------------------------------------------------------

" Install vim-plug if there is none
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Finding and replacing
" ------------------------------------------------------------------------------

" Fuzzy finding anything
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
" fzf integration for Vim
Plug 'junegunn/fzf.vim'
" async search
Plug 'dyng/ctrlsf.vim'
" Viewer & Finder for LSP symbols and tags
Plug 'liuchengxu/vista.vim'
" using ripgrep to jump to definition
Plug 'pechorin/any-jump.vim'

" File management
" ------------------------------------------------------------------------------

" File browser
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Language pack
" ------------------------------------------------------------------------------

" Syntax and highlighting for my languages
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx', { 'for': 'typescript' }

Plug 'neoclide/vim-jsx-improve', { 'for': 'javascript' }

Plug 'udalov/kotlin-vim', { 'for': 'kotlin' }

Plug 'hashivim/vim-terraform', { 'for': 'terraform' }
Plug 'chr4/nginx.vim'

Plug 'rhysd/vim-clang-format', { 'for': ['c', 'cpp'] }

Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'dhruvasagar/vim-table-mode', { 'for': 'markdown' }
Plug 'shime/vim-livedown', { 'for': 'markdown' }

Plug 'chrisbra/csv.vim', { 'for': 'csv' }
Plug 'ekalinin/Dockerfile.vim', { 'for': 'Dockerfile' }

Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-bundler', { 'for': 'ruby' }

Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'c-brenn/phoenix.vim', { 'for': 'elixir' }

Plug 'vim-erlang/vim-erlang-runtime', { 'for': 'erlang' }
Plug 'vim-erlang/vim-erlang-compiler', { 'for': 'erlang' }

Plug 'jwalton512/vim-blade', { 'for': 'php' }
Plug '2072/PHP-Indenting-for-VIm', { 'for': 'php' }
Plug 'noahfrederick/vim-composer', { 'for': 'php' }
Plug 'noahfrederick/vim-laravel', { 'for': 'php' }

Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'tpope/vim-leiningen', { 'for': 'clojure' }
Plug 'tpope/vim-classpath', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'venantius/vim-eastwood', { 'for': 'clojure' }


" HTML/CSS
" ------------------------------------------------------------------------------

Plug 'othree/html5.vim'
Plug 'digitaltoad/vim-pug', { 'for': 'pug' }
Plug 'lepture/vim-jinja', { 'for': 'jinja' }
Plug 'digitaltoad/vim-pug', { 'for': 'pug' }
Plug 'slim-template/vim-slim', { 'for': ['slim', 'slime'] }
Plug 'tpope/vim-haml', { 'for': 'haml' }
Plug 'kovisoft/slimv', { 'for': ['clojure', 'scheme', 'racket'] }
Plug 'wlangstroth/vim-racket', { 'for': 'racket' }

" General
" ------------------------------------------------------------------------------

Plug 'tpope/vim-sensible'
" Set spaces and other settings on a per project basis
Plug 'editorconfig/editorconfig-vim'
" Whitespace removal
Plug 'ntpeters/vim-better-whitespace'
" Fancy start screen
Plug 'mhinz/vim-startify'

" Editing
" ------------------------------------------------------------------------------

" Allow plugins to be repeated with dot
Plug 'tpope/vim-repeat'
" Comment out blocks of code
Plug 'tpope/vim-commentary'
" https://github.com/tpope/vim-unimpaired pairs of mappings
Plug 'tpope/vim-unimpaired'
" Autoclose parentheses
Plug 'cohama/lexima.vim'
" Make it easy to add/remove/change brackets, quotes etc
Plug 'tpope/vim-surround'
" Siblime style multicursor
Plug 'terryma/vim-multiple-cursors'
" Improve text objects for arguments, brackets etc
" Add various text objects
Plug 'wellle/targets.vim'

" https://github.com/tpope/vim-projectionist
Plug 'tpope/vim-projectionist'

" Systems
" ------------------------------------------------------------------------------

Plug 'hashivim/vim-terraform', { 'for': 'terraform' }
Plug 'chr4/nginx.vim'
Plug 'isobit/vim-caddyfile'

" Theme
" ------------------------------------------------------------------------------

Plug 'nanotech/jellybeans.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" distraction free style
" Plug 'logico/typewriter-vim'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'

" Snippets
" ------------------------------------------------------------------------------

Plug 'honza/vim-snippets'

" Git
" ------------------------------------------------------------------------------

Plug 'tpope/vim-fugitive'

" Test and Debug
" ------------------------------------------------------------------------------

Plug 'janko-m/vim-test'
Plug 'joonty/vdebug', { 'on': 'VdebugStart' }

" Coc
" ------------------------------------------------------------------------------

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-prettier',
      \ 'coc-html',
      \ 'coc-lists',
      \ 'coc-sh',
      \ 'coc-css',
      \ 'coc-stylelint',
      \ 'coc-vimlsp',
      \ 'coc-json',
      \ 'coc-eslint',
      \ 'coc-python',
      \ 'coc-jest',
      \ 'coc-solargraph',
      \ 'coc-yaml',
      \ 'coc-highlight',
      \ 'coc-snippets',
      \ 'coc-docker',
      \ 'coc-cspell-dicts',
      \ 'coc-spell-checker',
      \]

" ------------------------------------------------------------------------------

call plug#end()

"  General config
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" Set <space> to leader
let mapleader = "\<Space>"

" ------------------------------------------------------------------------------

" https://github.com/vim/vim/blob/master/runtime/doc/russian.txt
" Enable hotkeys for Russian layout
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" ------------------------------------------------------------------------------
" set visualbell
set completeopt=noinsert,menuone,noselect
set complete+=kspell

if has('mouse')
  set mouse=a
endif

set shortmess+=c
set cursorline " Highlight current line

" With :set hidden, opening a new file when the current buffer has unsaved
" changes causes files to be hidden instead of closed
set hidden

set nofoldenable
set wrap " wrap lines
set linebreak
set number " Line number
set hlsearch
set ignorecase " Ignore case of searches

" If a pattern contains an uppercase letter it is case sensitive, otherwise, it is not
set smartcase

" Turn off swapfiles
set nobackup
set nowritebackup
set nowb
set noswapfile

set showcmd       " display incomplete commands
set autowrite     " Automatically :write before running commands


set expandtab " Use spaces, not tabs

" Indent using two spaces.
set softtabstop=2
set shiftwidth=2

" Open new split panes to bottom, which feels more natural
set splitbelow

set updatetime=300
set cmdheight=2
set signcolumn=no " yes = always show sign column for git icons

" Start scrolling before cursor gets to the edge
set scrolloff=3

" Persistent Undo
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir /tmp/.vim/backups > /dev/null 2>&1
  set undodir=/tmp/.vim/backups
  set undofile
endif

" Theme
" ------------------------------------------------------------------------------
silent! colorscheme jellybeans
let g:jellybeans_use_term_italics = 1
let g:airline_theme='jellybeans'

"Use 24-bit (true-color) mode in Vim/Neovim;
set termguicolors

" Activate FOCUS mode with F12
" nmap <F12> :Goyo <bar> Limelight!!<CR>"

" add airline coc support
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
let g:airline#extensions#coc#enabled = 1

""" Basics Keymaps
" ------------------------------------------------------------------------------

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with line wrapping on, this can cause the cursor to actually skip a few lines on the screen because it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down' to mean the next line on the screen
nmap j gj
nmap k gk

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" Edit .vimrc
map <leader>vl :vsp $MYVIMRC<CR>
map <leader>vr :source $MYVIMRC<CR>

""" Plugins Keymaps
" ------------------------------------------------------------------------------

nmap <C-m> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>

nnoremap <leader>b :Buffers<CR>

""" Plugin Settings
" ------------------------------------------------------------------------------

let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toc_autofit = 1

""" NERDTree
let NERDTreeShowHidden = 1

" remove files to trash on linux
if executable('gio')
  let NERDTreeRemoveFileCmd='gio trash '
  let NERDTreeRemoveDirCmd='gio trash '
endif

" remove files to trash on mac
if executable('rmtrash')
  let NERDTreeRemoveFileCmd='rmtrash '
  let NERDTreeRemoveDirCmd='rmtrash '
endif

""" Startify
" don't change dir to opened file
let g:startify_change_to_dir = 0

let g:vista_default_executive = 'coc'

nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

let test#strategy = "neovim"

let g:vim_markdown_folding_disabled = 1

" format the entire file
nnoremap ff :normal! gg=G``<CR>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" use RG only to search in file content
command! -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>),
  \   1,
  \   {'options': '--delimiter : --nth 2..'})

nnoremap <Leader>w :w<CR>
nnoremap <Leader>o :GFiles .<CR>
nnoremap <leader>fc :Commits<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fa :Rg<CR>

let NERDTreeIgnore = ['\.pyc$', '\.retry$']

nmap <silent> // :nohlsearch<CR>
noremap <leader>hl :set hlsearch! hlsearch?<CR>

" Allows you to enter sudo pass and save the file
" " when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %

" nnoremap <silent> <bs> <C-w><Left>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" if filereadable(expand("~/.vimrc.after"))
"   source ~/.vimrc.after
" endif

" https://thoughtbot.com/blog/vim-spell-checking
" augroup markdownSpell
"     autocmd!
"     autocmd FileType markdown setlocal spell
"     autocmd BufRead,BufNewFile *.md setlocal spell
" augroup END

augroup FileTypeTetect
  autocmd!
  " au BufEnter *.markdown,*.mkd,*.md setl wrap tw=79
  " au BufEnter *.json setl ft=javascript
  " au BufEnter *.coffee setl sw=2 expandtab
  " au BufEnter *.py setl ts=4 sw=4 sts=4
  " autocmd BufEnter *.php setlocal ts=4 sw=4 sts=4
  filetype plugin indent on
  autocmd BufEnter *.js setlocal ts=4 sw=4 sts=4
  autocmd BufEnter *.java setlocal ts=4 sw=4 sts=4
  autocmd BufEnter Makefile setlocal ts=4 sw=4 noexpandtab
  autocmd BufNewFile,BufRead *.slim setlocal filetype=slim
  autocmd BufNewFile,BufRead *.slime setlocal filetype=slim
  autocmd BufNewFile,BufRead *.jsh setlocal filetype=java

  " au BufEnter *.js setl ts=2 sw=2 sts=2
  " au BufEnter *.html setl ts=4 sw=4 sts=4
  " au BufEnter *.tex setl wrap tw=79 fo=tcqor
  " au BufEnter *.[ch] setl cindent
  " au BufEnter *.[ch]pp setl cindent
  " au BufEnter Makefile setl ts=4 sts=4 sw=4 noet list
  " au BufEnter *.es6 setf javascript
augroup END

"""" COC
" ------------------------------------------------------------------------------

vmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

command! -nargs=0 Prettier :CocCommand prettier.formatFile

let g:coc_snippet_next = '<tab>'

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
"
" " Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

"" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

"" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

"" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

"" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

"" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

"" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Copy-paste to system clipboard
" ------------------------------------------------------------------------------
vmap <leader>y "+y
nmap <leader>y "+Y
nmap <leader>p "+p

" ------------------------------------------------------------------------------
